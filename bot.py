import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
import aiosqlite

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
start_date = datetime(2025, 1, 15)
end_date = datetime(2025, 12, 9)
active_chats = set()
daily_poll_time = "20:00"  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("participants.db") as db:
        await db.execute(
            """CREATE TABLE IF NOT EXISTS participants (
            user_id INTEGER PRIMARY KEY,
            name TEXT,
            drinks INTEGER DEFAULT 0,
            check_ins INTEGER DEFAULT 0
            )"""
        )
        await db.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def add_participant(user_id, name):
    async with aiosqlite.connect("participants.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO participants (user_id, name) VALUES (?, ?)",
            (user_id, name),
        )
        await db.commit()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def update_stat(user_id, column):
    async with aiosqlite.connect("participants.db") as db:
        await db.execute(f"UPDATE participants SET {column} = {column} + 1 WHERE user_id = ?", (user_id,))
        await db.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_stats():
    async with aiosqlite.connect("participants.db") as db:
        async with db.execute("SELECT * FROM participants") as cursor:
            return await cursor.fetchall()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command(commands=["start"]))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. üéâ\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start_challenge - –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
        "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/report - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è\n"
        "/mark_sober - –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤—Å–µ–º –¥–µ—Ä–∂–∞—Ç—å—Å—è!"
    )

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message(Command(commands=["help"]))
async def send_help(message: Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start_challenge - –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
        "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/report - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–∏—ë–º–µ –∞–ª–∫–æ–≥–æ–ª—è\n"
        "/mark_sober - –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start_challenge
@dp.message(Command(commands=["start_challenge"]))
async def start_challenge(message: Message):
    global active_chats
    active_chats.add(message.chat.id)
    await message.answer(f"üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –° {start_date.strftime('%d.%m.%Y')} –¥–æ {end_date.strftime('%d.%m.%Y')} üèÅ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /join
@dp.message(Command(commands=["join"]))
async def join_challenge(message: Message):
    user = message.from_user
    await add_participant(user.id, user.full_name)
    await message.answer(f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± —Ç—Ä–µ–∑–≤—ã—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤! ü¶Ñ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command(commands=["stats"]))
async def stats(message: Message):
    stats = await get_stats()
    if not stats:
        await message.answer("ü§∑ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∏–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Ç—Ä–µ–∑–≤–æ–º—É –¥–≤–∏–∂—É.")
        return
    days_passed = (datetime.now() - start_date).days
    days_left = (end_date - datetime.now()).days
    stats_message = f"‚è≥ –° –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø—Ä–æ—à–ª–æ: {days_passed} –¥–Ω–µ–π.\n–î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π.\n\n"
    for user_id, name, drinks, check_ins in stats:
        stats_message += f"üç∫ {name}: {drinks} —Ä–∞–∑(–∞) —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å), {check_ins} –æ—Ç–º–µ—Ç–æ–∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.\n"
    await message.answer(stats_message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /report
@dp.message(Command(commands=["report"]))
async def report(message: Message):
    user_id = message.from_user.id
    await update_stat(user_id, "drinks")
    await message.answer("üìâ –≠—Ö, –Ω—É —Ç—ã –∏ —Å–æ—Ä–≤–∞–ª—Å—è! –ó–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Ç—å. ü´£")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /mark_sober
@dp.message(Command(commands=["mark_sober"]))
async def mark_sober(message: Message):
    user_id = message.from_user.id
    await update_stat(user_id, "check_ins")
    await message.answer("üéâ –¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üçµ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /conditions
@dp.message(Command(commands=["conditions"]))
async def show_conditions(message: Message):
    await message.answer(
        "üí™ –£—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n"
        f"–ú—ã –Ω–µ –ø—å—ë–º —Å {start_date.strftime('%d.%m.%Y')} –¥–æ {end_date.strftime('%d.%m.%Y')}!\n"
        "–í–æ–∑–º–æ–∂–Ω—ã –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚Äî –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 2 –º–µ—Å—è—Ü–∞, \n"
        "–ø–æ –æ—á–µ–Ω—å —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ (–ø—Ä–∞–∑–¥–Ω–∏–∫, —É–∂–∏–Ω —Å –ë–∏—Ö–µ—Ä–æ–º).\n"
        "–®—Ç—Ä–∞—Ñ: 1üçã –∑–∞ –∫–∞–∂–¥–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ."
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await init_db()
    dp.message.register(send_welcome, Command(commands=["start"]))
    dp.message.register(send_help, Command(commands=["help"]))
    dp.message.register(start_challenge, Command(commands=["start_challenge"]))
    dp.message.register(join_challenge, Command(commands=["join"]))
    dp.message.register(stats, Command(commands=["stats"]))
    dp.message.register(report, Command(commands=["report"]))
    dp.message.register(mark_sober, Command(commands=["mark_sober"]))
    dp.message.register(show_conditions, Command(commands=["conditions"]))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
