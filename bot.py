import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery,
    ChatMemberUpdated
)
import aiosqlite
from datetime import datetime, timedelta
import pytz

# === –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ===

BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94"  # –ü–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ü—É—Ç—å –∫ –±–∞–∑–µ. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render ‚Üí Settings ‚Üí Environment):
# –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /data/participants.db
DB_PATH = os.getenv("DB_PATH", "/data/participants.db")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —É—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–æ—Å–∫–≤–µ
timezone_moscow = pytz.timezone("Europe/Moscow")

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (HH:MM, –º–æ—Å–∫–æ–≤—Å–∫–æ–µ)
daily_poll_time = "16:55"

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ===

async def init_db():
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç):
      1) chat_settings ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
      2) participants  ‚Äî –¥–ª—è —É—á—ë—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
    """
    async with aiosqlite.connect(DB_PATH) as db:
        # –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        await db.execute("""
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id    INTEGER PRIMARY KEY,
                start_date TEXT,
                end_date   TEXT,
                conditions TEXT,
                active     INTEGER DEFAULT 0
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (—É –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —Å–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                row_id     INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id    INTEGER,
                user_id    INTEGER,
                name       TEXT,
                drinks     INTEGER DEFAULT 0,
                check_ins  INTEGER DEFAULT 0,
                UNIQUE(chat_id, user_id)
            )
        """)
        await db.commit()

async def add_or_update_chat(chat_id: int, start_date_str: str, end_date_str: str, conditions: str = None):
    """
    –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ: (start_date, end_date, conditions).
    –ü—Ä–∏ —ç—Ç–æ–º —Å—Ç–∞–≤–∏–º active=1 (—Ç–æ –µ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –≤–∫–ª—é—á—ë–Ω).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO chat_settings (chat_id, start_date, end_date, conditions, active)
            VALUES (?, ?, ?, ?, 1)
            ON CONFLICT(chat_id) DO UPDATE SET
                start_date=excluded.start_date,
                end_date=excluded.end_date,
                conditions=excluded.conditions,
                active=1
        """, (chat_id, start_date_str, end_date_str, conditions if conditions else ""))
        await db.commit()

async def load_chat_settings(chat_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (start_date, end_date, conditions, active) –¥–ª—è —á–∞—Ç–∞, –∏–ª–∏ None, –µ—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT start_date, end_date, conditions, active FROM chat_settings WHERE chat_id = ?", (chat_id,))
        row = await cursor.fetchone()
        return row  # (start_date, end_date, conditions, active) –∏–ª–∏ None

async def set_chat_active(chat_id: int, active: bool):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º active=1 –∏–ª–∏ 0 –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        val = 1 if active else 0
        await db.execute("UPDATE chat_settings SET active = ? WHERE chat_id = ?", (val, chat_id))
        await db.commit()

async def get_all_active_chats():
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id, –≥–¥–µ active=1 (—Ç—É–¥–∞ —à–ª—ë–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã).
    """
    results = []
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT chat_id FROM chat_settings WHERE active = 1") as cursor:
            async for row in cursor:
                results.append(row[0])
    return results

# === –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—Ç–∞–±–ª–∏—Ü–∞ participants) ===

async def add_participant(chat_id: int, user_id: int, name: str):
    """
    –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ (chat_id + user_id). –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR IGNORE INTO participants (chat_id, user_id, name)
            VALUES (?, ?, ?)
        """, (chat_id, user_id, name))
        await db.commit()

async def update_stat(chat_id: int, user_id: int, column: str):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º drinks –∏–ª–∏ check_ins –Ω–∞ 1 –¥–ª—è (chat_id, user_id).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            f"UPDATE participants SET {column} = {column} + 1 WHERE chat_id = ? AND user_id = ?",
            (chat_id, user_id)
        )
        await db.commit()

async def get_stats_for_chat(chat_id: int):
    """
    –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ (chat_id).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º list[(user_id, name, drinks, check_ins), ...].
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT user_id, name, drinks, check_ins FROM participants WHERE chat_id = ?",
            (chat_id,)
        ) as cursor:
            return await cursor.fetchall()

# === –§–£–ù–ö–¶–ò–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ô –†–ê–°–°–´–õ–ö–ò –û–ü–†–û–°–ê ===

async def send_daily_poll():
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª: –∂–¥—ë–º –≤—Ä–µ–º–µ–Ω–∏ daily_poll_time, –ø–æ—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–ø—Ä–æ—Å –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ active=1.
    """
    while True:
        now = datetime.now(timezone_moscow)
        target_time = datetime.strptime(daily_poll_time, "%H:%M").time()
        target_datetime = timezone_moscow.localize(datetime.combine(now.date(), target_time))

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if now.time() > target_time:
            target_datetime += timedelta(days=1)

        delay = (target_datetime - now).total_seconds()
        print(f"[LOG] –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {delay:.0f} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(delay)

        # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã (active=1)
        active_chats = await get_all_active_chats()

        for chat_id in active_chats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ù–µ –ø–∏–ª üçµ", callback_data="not_drink"),
                    InlineKeyboardButton(text="–ü–∏–ª üç∫",    callback_data="drink")
                ]
            ])
            try:
                await bot.send_message(chat_id, "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–∏–ª –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –≤ —á–∞—Ç {chat_id}: {e}")

# === –•–ï–ù–î–õ–ï–†–´ ===

@dp.my_chat_member()
async def bot_added_to_group(update: ChatMemberUpdated):
    """
    –ö–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –≥—Ä—É–ø–ø—É (–∏–ª–∏ —Ä–∞—Å–∫–∏–∫–∏–≤–∞—é—Ç).
    –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ chat_settings (–µ—Å–ª–∏ –Ω–µ—Ç), –Ω–æ –ø–æ–∫–∞ active=0.
    """
    if update.new_chat_member.user.id == (await bot.me()).id:
        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status
        if old_status in ("kicked", "left") and new_status in ("member", "administrator"):
            chat_id = update.chat.id
            row = await load_chat_settings(chat_id)
            if not row:
                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –Ω–æ –Ω–µ –≤–∫–ª—é—á–∞–µ–º (active=0).
                await add_or_update_chat(chat_id, "", "", "")
                await set_chat_active(chat_id, False)

            await bot.send_message(
                chat_id,
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n"
                "–ó–∞–ø—É—Å—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: /start_challenge YYYY-MM-DD YYYY-MM-DD\n"
                "–ò–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
            )

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ /start (–≤ –õ–° –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ).
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. üéâ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start_challenge YYYY-MM-DD YYYY-MM-DD ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
        "‚Ä¢ /join ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "‚Ä¢ /stats ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ /report ‚Äî –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è\n"
        "‚Ä¢ /mark_sober ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ /conditions ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å —É—Å–ª–æ–≤–∏—è\n"
        "‚Ä¢ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )

@dp.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start_challenge YYYY-MM-DD YYYY-MM-DD ‚Äî –ó–∞–ø—É—Å–∫/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–¥–∞—Ç—ã)\n"
        "/join ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
        "/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É\n"
        "/report ‚Äî –°–æ–æ–±—â–∏—Ç—å –æ —Å—Ä—ã–≤–µ (drinks + 1)\n"
        "/mark_sober ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å (check_ins + 1)\n"
        "/conditions ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: /conditions –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞...)\n"
        "/help ‚Äî –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )
    await message.answer(text)

@dp.message(Command(commands=["start_challenge"]))
async def cmd_start_challenge(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start_challenge YYYY-MM-DD YYYY-MM-DD
    –ü—Ä–∏–º–µ—Ä: /start_challenge 2025-01-15 2025-12-09
    """
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /start_challenge 2025-01-15 2025-12-09")
        return

    start_date_str = parts[1]
    end_date_str   = parts[2]
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã:
    try:
        datetime.strptime(start_date_str, "%Y-%m-%d")
        datetime.strptime(end_date_str,   "%Y-%m-%d")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")
        return

    chat_id = message.chat.id
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ chat_settings
    await add_or_update_chat(chat_id, start_date_str, end_date_str)
    # –°—Ç–∞–≤–∏–º active=1
    await set_chat_active(chat_id, True)

    await message.answer(
        f"üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω!\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}.\n"
        f"–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {daily_poll_time} (–ø–æ –ú–æ—Å–∫–≤–µ)."
    )

@dp.message(Command(commands=["join"]))
async def cmd_join(message: Message):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    """
    chat_id = message.chat.id
    user = message.from_user
    await add_participant(chat_id, user.id, user.full_name)
    await message.answer(f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–∑–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")

@dp.message(Command(commands=["stats"]))
async def cmd_stats(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É:
      - –î–∞—Ç—ã —á–µ–ª–ª–µ–Ω–¥–∂–∞ (start_date, end_date)
      - –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ –∏ –æ—Å—Ç–∞–ª–æ—Å—å
      - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    chat_id = message.chat.id
    chat_settings = await load_chat_settings(chat_id)
    if not chat_settings:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ–ª–ª–µ–Ω–¥–∂ (–∏—Å–ø–æ–ª—å–∑—É–π /start_challenge).")
        return

    start_date_str, end_date_str, conditions, active = chat_settings
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ)
    try:
        start_dt = datetime.strptime(start_date_str, "%Y-%m-%d")
    except:
        start_dt = datetime.now()

    try:
        end_dt = datetime.strptime(end_date_str, "%Y-%m-%d")
    except:
        end_dt = datetime.now()

    now = datetime.now()
    days_passed = (now - start_dt).days
    if days_passed < 0:
        days_passed = 0
    days_left = (end_dt - now).days
    if days_left < 0:
        days_left = 0

    # –í—ã–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    stats = await get_stats_for_chat(chat_id)
    if not stats:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è (/join).")
        return

    msg = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ {chat_id}:\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n"
        f"‚è≥ –ü—Ä–æ—à–ª–æ: {days_passed} –¥–Ω–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π.\n\n"
    )
    for (user_id, name, drinks, check_ins) in stats:
        msg += f"‚Ä¢ {name} ‚Äî —Å–æ—Ä–≤–∞–ª—Å—è: {drinks}, —Ç—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π: {check_ins}\n"

    await message.answer(msg)

@dp.message(Command(commands=["report"]))
async def cmd_report(message: Message):
    """
    –û—Ç–º–µ—á–∞–µ–º —Å—Ä—ã–≤ (drinks += 1) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    await update_stat(chat_id, user_id, "drinks")
    await message.answer("üìâ –û—Ç–º–µ—Ç–∏–ª —Å—Ä—ã–≤. –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –∑–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å!")

@dp.message(Command(commands=["mark_sober"]))
async def cmd_mark_sober(message: Message):
    """
    –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å (check_ins += 1) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    await update_stat(chat_id, user_id, "check_ins")
    await message.answer("üéâ –¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")

@dp.message(Command(commands=["conditions"]))
async def cmd_conditions(message: Message):
    """
    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    –ü—Ä–∏–º–µ—Ä: /conditions => –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–µ
             /conditions –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è... => –∑–∞–ø–∏—à–µ—Ç –Ω–æ–≤—ã–µ
    """
    chat_id = message.chat.id
    text = message.text.strip()
    parts = text.split(maxsplit=1)

    chat_settings = await load_chat_settings(chat_id)
    if not chat_settings:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ–ª–ª–µ–Ω–¥–∂. –°–Ω–∞—á–∞–ª–∞ /start_challenge.")
        return

    start_date_str, end_date_str, old_conditions, active = chat_settings

    if len(parts) > 1:
        new_conds = parts[1].strip()
        await add_or_update_chat(chat_id, start_date_str, end_date_str, new_conds)
        await message.answer(f"–£—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{new_conds}")
    else:
        if old_conditions:
            await message.answer(f"–£—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n{old_conditions}")
        else:
            await message.answer(
                "–ü–æ–∫–∞ –Ω–µ—Ç —É—Å–ª–æ–≤–∏–π. –ó–∞–¥–∞–π —Ç–∞–∫:\n"
                '/conditions –£—Å–ª–æ–≤–∏–µ 1, –£—Å–ª–æ–≤–∏–µ 2, –®—Ç—Ä–∞—Ñ –∑–∞ —Å—Ä—ã–≤ = 1 –ª–∏–º–æ–Ω...'
            )

@dp.callback_query(F.data.in_({"not_drink", "drink"}))
async def handle_poll_response(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ù–µ –ø–∏–ª üçµ" / "–ü–∏–ª üç∫".
    –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞, –≥–¥–µ —É –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —Å–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.
    """
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id  # —á–∞—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞

    if callback.data == "not_drink":
        await update_stat(chat_id, user_id, "check_ins")
        await callback.answer("üéâ –ú–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏—Å—å –¥–∞–ª—å—à–µ!")
    else:  # "drink"
        await update_stat(chat_id, user_id, "drinks")
        await callback.answer("üìâ –ó–∞–ø–∏—Å–∞–ª. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å!")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

async def main():
    await init_db()  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ—Ç)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è —à–ª—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
    asyncio.create_task(send_daily_poll())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (—á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
