import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ChatMemberUpdated,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from datetime import datetime, date, time, timedelta
import pytz
import aiosqlite

# =================== –ù–ê–°–¢–†–û–ô–ö–ò ===================

BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94
"

# –ü—É—Ç—å –∫ –±–∞–∑–µ. –ï—Å–ª–∏ –Ω–∞ Render —Å–¥–µ–ª–∞–Ω Volume —Å mount path /data,
# —Ç–æ —É–¥–æ–±–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –≤ "/data/participants.db".
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DB_PATH –≤ Settings Render.
DB_PATH = os.getenv("DB_PATH", "/data/participants.db")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å 
timezone_moscow = pytz.timezone("Europe/Moscow")

# =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ===================

async def init_db():
    """
    –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    'chat_settings' ‚Äî —Ö—Ä–∞–Ω–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
    'participants'  ‚Äî —Ö—Ä–∞–Ω–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—á—ë—Ç—á–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è poll_time (DEFAULT '23:30') –∏ last_poll_date (DEFAULT '')
        await db.execute("""
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id        INTEGER PRIMARY KEY,
                start_date     TEXT,
                end_date       TEXT,
                conditions     TEXT,
                active         INTEGER DEFAULT 0,
                poll_time      TEXT DEFAULT '23:30',
                last_poll_date TEXT DEFAULT ''
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: (chat_id, user_id) => drinks, check_ins
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                row_id     INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id    INTEGER,
                user_id    INTEGER,
                name       TEXT,
                drinks     INTEGER DEFAULT 0,
                check_ins  INTEGER DEFAULT 0,
                UNIQUE(chat_id, user_id)
            )
        """)
        await db.commit()

# --- –†–∞–±–æ—Ç–∞ —Å chat_settings ---

async def add_or_update_chat(chat_id: int,
                             start_date_str: str,
                             end_date_str: str,
                             poll_time_str: str = "23:30",
                             conditions: str = ""):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ, –≤—ã—Å—Ç–∞–≤–ª—è—è —Å—Ä–∞–∑—É active=1.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT INTO chat_settings (chat_id, start_date, end_date, conditions, active, poll_time)
            VALUES (?, ?, ?, ?, 1, ?)
            ON CONFLICT(chat_id) DO UPDATE SET
                start_date  = excluded.start_date,
                end_date    = excluded.end_date,
                conditions  = excluded.conditions,
                active      = 1,
                poll_time   = excluded.poll_time
        """, (chat_id, start_date_str, end_date_str, conditions, poll_time_str))
        await db.commit()

async def load_chat_settings(chat_id: int):
    """
    –î–æ—Å—Ç–∞—ë–º –∑–∞–ø–∏—Å—å (start_date, end_date, conditions, active, poll_time, last_poll_date).
    –í–µ—Ä–Ω—ë—Ç –∫–æ—Ä—Ç–µ–∂ –∏–ª–∏ None.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT start_date, end_date, conditions, active, poll_time, last_poll_date
            FROM chat_settings
            WHERE chat_id = ?
        """, (chat_id,))
        row = await cursor.fetchone()
        return row

async def set_chat_active(chat_id: int, active: bool):
    """
    –ú–µ–Ω—è–µ–º active=1 –∏–ª–∏ 0 –¥–ª—è —á–∞—Ç–∞.
    """
    val = 1 if active else 0
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET active=? WHERE chat_id=?", (val, chat_id))
        await db.commit()

async def set_chat_poll_time(chat_id: int, poll_time_str: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET poll_time=? WHERE chat_id=?", (poll_time_str, chat_id))
        await db.commit()

async def set_chat_last_poll_date(chat_id: int, date_str: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–ª–∞–ª–∏ –æ–ø—Ä–æ—Å (—á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –¥–≤–∞–∂–¥—ã –≤ –æ–¥–∏–Ω –¥–µ–Ω—å).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET last_poll_date=? WHERE chat_id=?", (date_str, chat_id))
        await db.commit()

async def get_all_active_chats():
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chat_id, –≥–¥–µ active=1.
    –í–µ—Ä–Ω—ë–º [(chat_id, poll_time, last_poll_date), ...].
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT chat_id, poll_time, last_poll_date
            FROM chat_settings
            WHERE active=1
        """)
        rows = await cursor.fetchall()
        return rows  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (chat_id, poll_time, last_poll_date)

# --- –†–∞–±–æ—Ç–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ ---

async def add_participant(chat_id: int, user_id: int, name: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR IGNORE INTO participants (chat_id, user_id, name)
            VALUES (?, ?, ?)
        """, (chat_id, user_id, name))
        await db.commit()

async def update_stat(chat_id: int, user_id: int, column: str):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º drinks –∏–ª–∏ check_ins –Ω–∞ 1 —É (chat_id, user_id).
    column –º–æ–∂–µ—Ç –±—ã—Ç—å 'drinks' –∏–ª–∏ 'check_ins'.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            f"UPDATE participants SET {column} = {column} + 1 WHERE chat_id=? AND user_id=?",
            (chat_id, user_id)
        )
        await db.commit()

async def get_stats_for_chat(chat_id: int):
    """
    –°–ø–∏—Å–æ–∫ (user_id, name, drinks, check_ins) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT user_id, name, drinks, check_ins
            FROM participants
            WHERE chat_id=?
        """, (chat_id,))
        rows = await cursor.fetchall()
        return rows

# ================== –û–ü–†–û–° (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ==================

async def schedule_polls_loop():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (–∫—Ä—É—Ç–∏—Ç—Å—è –≤ while True):
    –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ active=1:
      - –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= poll_time —á–∞—Ç–∞,
      - –∏ 'last_poll_date' –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π,
      => —à–ª—ë–º –æ–ø—Ä–æ—Å –∏ —Å—Ç–∞–≤–∏–º last_poll_date = —Å–µ–≥–æ–¥–Ω—è.
    """
    while True:
        now = datetime.now(timezone_moscow)
        today_str = now.strftime("%Y-%m-%d")

        # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = await get_all_active_chats()  # [(chat_id, poll_time, last_poll_date), ...]

        for (chat_id, poll_time_str, last_poll_date) in active_chats:
            # –ü–∞—Ä—Å–∏–º poll_time_str —Ç–∏–ø–∞ "23:30"
            try:
                h, m = poll_time_str.split(":")
                poll_time_obj = time(hour=int(h), minute=int(m))
            except:
                # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ä–∏–≤–∞—è –∑–∞–ø–∏—Å—å, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç 23:30
                poll_time_obj = time(23, 30)

            poll_today = datetime.combine(now.date(), poll_time_obj)
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
            poll_today = timezone_moscow.localize(poll_today)

            # –ï—Å–ª–∏ –º—ã –µ—â—ë –Ω–µ —Å–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è (last_poll_date != today_str) –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= poll_today
            if last_poll_date != today_str and now >= poll_today:
                # –®–ª—ë–º –æ–ø—Ä–æ—Å
                await send_poll(chat_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º last_poll_date, —á—Ç–æ–±—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                await set_chat_last_poll_date(chat_id, today_str)

        # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        await asyncio.sleep(60)

async def send_poll(chat_id: int):
    """
    –ü–æ—Å—ã–ª–∞–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ù–µ –ø–∏–ª¬ª / ¬´–ü–∏–ª¬ª.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–µ –ø–∏–ª üçµ", callback_data="not_drink"),
            InlineKeyboardButton(text="–ü–∏–ª üç∫",    callback_data="drink")
        ]
    ])
    try:
        await bot.send_message(chat_id, "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–∏–ª –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)
        print(f"[LOG] –û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –≤ —á–∞—Ç {chat_id}: {e}")

# ================== –•–ï–ù–î–õ–ï–†–´ ==================

dp = Dispatcher()

# --- –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —á–∞—Ç–µ, –µ—Å–ª–∏ –±–æ—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ ---

@dp.my_chat_member()
async def bot_added_to_group(update: ChatMemberUpdated):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç/–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤ —á–∞—Ç.
    –°–æ–∑–¥–∞–¥–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –≤ chat_settings (active=0, –±–µ–∑ –¥–∞—Ç), –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç.
    """
    if update.new_chat_member.user.id == (await bot.me()).id:
        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status
        if old_status in ("kicked", "left") and new_status in ("member", "administrator"):
            chat_id = update.chat.id

            row = await load_chat_settings(chat_id)
            if not row:
                # —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º (active=0)
                async with aiosqlite.connect(DB_PATH) as db:
                    await db.execute("""
                        INSERT OR IGNORE INTO chat_settings (chat_id, active)
                        VALUES (?, 0)
                    """, (chat_id,))
                    await db.commit()

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id,
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n"
                "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ –≤ —ç—Ç–æ–º —á–∞—Ç–µ: /start_challenge <start_date> <end_date> <poll_time>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /start_challenge 2025-01-15 2025-12-09 22:00"
            )

# --- –ö–Ω–æ–ø–æ—á–∫–∏ –≤ –≤–∏–¥–µ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

# –≠—Ç–æ —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ /start –∏ /help
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start_challenge"), KeyboardButton(text="/edit_challenge")],
        [KeyboardButton(text="/join"), KeyboardButton(text="/stats")],
        [KeyboardButton(text="/report"), KeyboardButton(text="/mark_sober")],
        [KeyboardButton(text="/conditions"), KeyboardButton(text="/set_time")],
        [KeyboardButton(text="/help")]
    ],
    resize_keyboard=True
)

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """
    /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫.
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n\n"
        "–ù–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é:\n"
        "/start_challenge <start> <end> <time>  ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
        "/join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "/stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/report ‚Äî —Å–æ–æ–±—â–∏—Ç—å –æ —Å—Ä—ã–≤–µ\n"
        "/mark_sober ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è\n"
        "/set_time <HH:MM> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞\n"
        "/edit_challenge <start> <end> <time> ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã/–≤—Ä–µ–º—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –∂–µ –º–µ–Ω—é",
        reply_markup=main_menu
    )

@dp.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    """
    /help ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ, –ø–ª—é—Å –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫.
    """
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start_challenge YYYY-MM-DD YYYY-MM-DD HH:MM\n"
        "   ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å (–∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å) —á–µ–ª–ª–µ–Ω–¥–∂ —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º.\n\n"
        "/edit_challenge YYYY-MM-DD YYYY-MM-DD HH:MM\n"
        "   ‚Äî –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ (–¥–∞—Ç—ã/–≤—Ä–µ–º—è).\n\n"
        "/set_time HH:MM\n"
        "   ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞.\n\n"
        "/join\n"
        "   ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É.\n\n"
        "/report\n"
        "   ‚Äî –°–æ–æ–±—â–∏—Ç—å, —á—Ç–æ —Å–æ—Ä–≤–∞–ª—Å—è (–∞–ª–∫–æ–≥–æ–ª—å).\n\n"
        "/mark_sober\n"
        "   ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å.\n\n"
        "/stats\n"
        "   ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
        "/conditions\n"
        "   ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n\n"
        "/help\n"
        "   ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await message.answer(text, reply_markup=main_menu)

# --- –ó–∞–ø—É—Å–∫/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ ---

@dp.message(Command(commands=["start_challenge"]))
async def cmd_start_challenge(message: Message):
    """
    /start_challenge <start_date> <end_date> <poll_time>
    –ü—Ä–∏–º–µ—Ä: /start_challenge 2025-01-15 2025-12-09 22:00
    –ï—Å–ª–∏ poll_time –Ω–µ —É–∫–∞–∑–∞–ª–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä—ë–º 23:30.
    """
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /start_challenge 2025-01-15 2025-12-09 [HH:MM]")
        return

    start_date_str = parts[1]
    end_date_str   = parts[2]
    poll_time_str  = "23:30"
    if len(parts) >= 4:
        poll_time_str = parts[3]

    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã–µ
    # (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±–µ—Ä–Ω—ë–º –≤ try)
    try:
        datetime.strptime(start_date_str, "%Y-%m-%d")
        datetime.strptime(end_date_str, "%Y-%m-%d")
        # –í—Ä–µ–º—è —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º (HH:MM)
        if poll_time_str != "":
            datetime.strptime(poll_time_str, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è). –ü—Ä–∏–º–µ—Ä: 2025-01-15 2025-12-09 22:00")
        return

    chat_id = message.chat.id
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —á–∞—Ç–∞
    await add_or_update_chat(chat_id, start_date_str, end_date_str, poll_time_str)
    # –ß–µ–ª–ª–µ–Ω–¥–∂ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    await set_chat_active(chat_id, True)

    await message.answer(
        f"–ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω!\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n"
        f"–í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: {poll_time_str}\n"
        f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –≤ —ç—Ç–æ –≤—Ä–µ–º—è (–ø–æ –ú–æ—Å–∫–≤–µ)."
    )

@dp.message(Command(commands=["edit_challenge"]))
async def cmd_edit_challenge(message: Message):
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ /start_challenge, –Ω–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –µ—Å—Ç—å.
    –ü–æ —Å—É—Ç–∏, –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ "–æ–±–Ω–æ–≤–ª—è–µ—Ç".
    """
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /edit_challenge 2025-02-01 2025-12-31 [HH:MM]")
        return

    start_date_str = parts[1]
    end_date_str   = parts[2]
    poll_time_str  = "23:30"
    if len(parts) >= 4:
        poll_time_str = parts[3]

    try:
        datetime.strptime(start_date_str, "%Y-%m-%d")
        datetime.strptime(end_date_str, "%Y-%m-%d")
        if poll_time_str != "":
            datetime.strptime(poll_time_str, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏).")
        return

    chat_id = message.chat.id
    await add_or_update_chat(chat_id, start_date_str, end_date_str, poll_time_str)
    await set_chat_active(chat_id, True)
    await message.answer(
        f"–ß–µ–ª–ª–µ–Ω–¥–∂ –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
        f"–ù–æ–≤—ã–µ –¥–∞—Ç—ã: {start_date_str} - {end_date_str}\n"
        f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: {poll_time_str}"
    )

@dp.message(Command(commands=["set_time"]))
async def cmd_set_time(message: Message):
    """
    –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ (–≤ already –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ).
    –ü—Ä–∏–º–µ—Ä: /set_time 21:00
    """
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /set_time HH:MM")
        return

    poll_time_str = parts[1]
    try:
        datetime.strptime(poll_time_str, "%H:%M")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM).")
        return

    chat_id = message.chat.id
    # –æ–±–Ω–æ–≤–∏–º –ø–æ–ª–µ poll_time
    await set_chat_poll_time(chat_id, poll_time_str)
    # –≤–∫–ª—é—á–∞–µ–º —á—ë–ª–ª–µ–Ω–¥–∂, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    await set_chat_active(chat_id, True)

    await message.answer(f"–í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {poll_time_str} (–ø–æ –ú–æ—Å–∫–≤–µ).")

# --- –£—á–∞—Å—Ç–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

@dp.message(Command(commands=["join"]))
async def cmd_join(message: Message):
    """
    /join ‚Äî —é–∑–µ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
    """
    chat_id = message.chat.id
    user = message.from_user
    await add_participant(chat_id, user.id, user.full_name)
    await message.answer(f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")

@dp.message(Command(commands=["stats"]))
async def cmd_stats(message: Message):
    """
    /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É.
    """
    chat_id = message.chat.id
    settings = await load_chat_settings(chat_id)
    if not settings:
        await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü–æ–ø—Ä–æ–±—É–π /start_challenge.")
        return

    start_date_str, end_date_str, conditions, active, poll_time, last_poll_date = settings
    try:
        start_dt = datetime.strptime(start_date_str, "%Y-%m-%d")
    except:
        start_dt = datetime.now()
    try:
        end_dt = datetime.strptime(end_date_str, "%Y-%m-%d")
    except:
        end_dt = datetime.now()

    now = datetime.now()
    days_passed = (now - start_dt).days
    if days_passed < 0:
        days_passed = 0
    days_left = (end_dt - now).days
    if days_left < 0:
        days_left = 0

    participants = await get_stats_for_chat(chat_id)
    if not participants:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —ç—Ç–æ–º—É —á–µ–ª–ª–µ–Ω–¥–∂—É (/join).")
        return

    msg = (
        f"–ß–µ–ª–ª–µ–Ω–¥–∂ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n"
        f"–ü–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}\n"
        f"–í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: {poll_time}\n"
        f"–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π: {days_passed}, –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}\n\n"
        "–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n"
    )
    for user_id, name, drinks, check_ins in participants:
        msg += f"‚Ä¢ {name}: —Å–æ—Ä–≤–∞–ª—Å—è {drinks} —Ä–∞–∑(–∞), —Ç—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π {check_ins}\n"

    await message.answer(msg)

# --- –°—Ä—ã–≤ –∏ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å ---

@dp.message(Command(commands=["report"]))
async def cmd_report(message: Message):
    """
    /report ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å—Ä—ã–≤–æ–≤ (drinks).
    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    await update_stat(chat_id, user_id, "drinks")
    await message.answer("üìâ –ó–∞–ø–∏—Å–∞–ª —Å—Ä—ã–≤. –ú—ã –≤—Å–µ —Ç–µ–±—è –ø—Ä–µ–∑–∏—Ä–∞–µ–º!)))")

@dp.message(Command(commands=["mark_sober"]))
async def cmd_mark_sober(message: Message):
    """
    /mark_sober ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Ç—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π (check_ins).
    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    await update_stat(chat_id, user_id, "check_ins")
    await message.answer("üéâ –¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω! –û—Ç–ª–∏—á–Ω–æ!")

# --- –£—Å–ª–æ–≤–∏—è ---

@dp.message(Command(commands=["conditions"]))
async def cmd_conditions(message: Message):
    """
    /conditions ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —É—Å–ª–æ–≤–∏–π.
    –ü—Ä–∏–º–µ—Ä:
      /conditions -> –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ
      /conditions –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞... -> –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ
    """
    chat_id = message.chat.id
    text = message.text.strip()
    parts = text.split(maxsplit=1)

    row = await load_chat_settings(chat_id)
    if not row:
        await message.answer("–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü–æ–ø—Ä–æ–±—É–π /start_challenge.")
        return
    start_date_str, end_date_str, old_conditions, active, poll_time, last_poll_date = row

    if len(parts) > 1:
        new_conds = parts[1].strip()
        # –ó–∞–ø–∏—à–µ–º –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        await add_or_update_chat(chat_id, start_date_str, end_date_str, poll_time, new_conds)
        await message.answer(f"–£—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n{new_conds}")
    else:
        if old_conditions:
            await message.answer(f"–¢–µ–∫—É—â–∏–µ —É—Å–ª–æ–≤–∏—è:\n{old_conditions}")
        else:
            await message.answer("–ü–æ–∫–∞ —É—Å–ª–æ–≤–∏–π –Ω–µ—Ç. –í–≤–µ–¥–∏ /conditions <—Ç–µ–∫—Å—Ç> —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–ø—Ä–æ—Å–∞ ---

@dp.callback_query(F.data.in_({"not_drink", "drink"}))
async def handle_poll_response(callback: CallbackQuery):
    """
    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º—ë—Ç ¬´–ù–µ –ø–∏–ª üçµ¬ª –∏–ª–∏ ¬´–ü–∏–ª üç∫¬ª –≤ –æ–ø—Ä–æ—Å–µ.
    """
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id  # —Ç–æ—Ç —á–∞—Ç, –≥–¥–µ –±—ã–ª –æ–ø—Ä–æ—Å

    if callback.data == "not_drink":
        await update_stat(chat_id, user_id, "check_ins")
        await callback.answer("üéâ –ú–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏—Å—å –¥–∞–ª—å—à–µ!")
    else:
        await update_stat(chat_id, user_id, "drinks")
        await callback.answer("üìâ –ó–∞–ø–∏—Å–∞–ª. –ù–µ –≥–æ—Ä–∂—É—Å—å!")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================

async def main():
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    await init_db()

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–æ—Ä–∞ –ª–∏ —Å–ª–∞—Ç—å –æ–ø—Ä–æ—Å.
    asyncio.create_task(schedule_polls_loop())

    # 3. –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ–ª–ª–∏–Ω–≥
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(Bot(token=BOT_TOKEN))

if __name__ == "__main__":
    asyncio.run(main())
