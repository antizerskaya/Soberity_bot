import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ChatMemberUpdated,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from datetime import datetime, date, time, timedelta
import pytz
import aiosqlite

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------

BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94" 

# –•—Ä–∞–Ω–∏–º –±–∞–∑—É –≤ /data (–µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–∞ Render –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω Volume)
DB_PATH = os.getenv("DB_PATH", "/data/participants.db")

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
timezone_moscow = pytz.timezone("Europe/Moscow")

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ----------

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id        INTEGER PRIMARY KEY,
                start_date     TEXT,
                end_date       TEXT,
                conditions     TEXT,
                active         INTEGER DEFAULT 0,
                poll_time      TEXT DEFAULT '23:30',
                last_poll_date TEXT DEFAULT ''
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                row_id     INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id    INTEGER,
                user_id    INTEGER,
                name       TEXT,
                drinks     INTEGER DEFAULT 0,
                check_ins  INTEGER DEFAULT 0,
                UNIQUE(chat_id, user_id)
            )
        """)
        await db.commit()

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö –ß–ê–¢–ê ----------

async def add_or_update_chat(
    chat_id: int,
    start_date_str: str,
    end_date_str: str,
    poll_time_str: str = "23:30",
    conditions: str = ""
):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO chat_settings (chat_id, start_date, end_date, conditions, active, poll_time)
            VALUES (?, ?, ?, ?, 1, ?)
            ON CONFLICT(chat_id) DO UPDATE SET
                start_date  = excluded.start_date,
                end_date    = excluded.end_date,
                conditions  = excluded.conditions,
                active      = 1,
                poll_time   = excluded.poll_time
            """,
            (chat_id, start_date_str, end_date_str, conditions, poll_time_str)
        )
        await db.commit()

async def load_chat_settings(chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT start_date, end_date, conditions, active, poll_time, last_poll_date
            FROM chat_settings
            WHERE chat_id = ?
        """, (chat_id,))
        return await cursor.fetchone()

async def set_chat_active(chat_id: int, active: bool):
    val = 1 if active else 0
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET active=? WHERE chat_id=?", (val, chat_id))
        await db.commit()

async def set_chat_poll_time(chat_id: int, poll_time_str: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET poll_time=? WHERE chat_id=?", (poll_time_str, chat_id))
        await db.commit()

async def set_chat_last_poll_date(chat_id: int, date_str: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE chat_settings SET last_poll_date=? WHERE chat_id=?", (date_str, chat_id))
        await db.commit()

async def get_all_active_chats():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT chat_id, poll_time, last_poll_date
            FROM chat_settings
            WHERE active=1
        """)
        return await cursor.fetchall()

# ---------- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ß–ê–°–¢–ù–ò–ö–û–í ----------

async def add_participant(chat_id: int, user_id: int, name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR IGNORE INTO participants (chat_id, user_id, name)
            VALUES (?, ?, ?)
        """, (chat_id, user_id, name))
        await db.commit()

async def update_stat(chat_id: int, user_id: int, column: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            f"UPDATE participants SET {column} = {column} + 1 WHERE chat_id=? AND user_id=?",
            (chat_id, user_id)
        )
        await db.commit()

async def get_stats_for_chat(chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("""
            SELECT user_id, name, drinks, check_ins
            FROM participants
            WHERE chat_id=?
        """, (chat_id,))
        return await cursor.fetchall()

# ---------- –§–û–ù–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê –û–ü–†–û–°–ê ----------

async def schedule_polls_loop():
    while True:
        now = datetime.now(timezone_moscow)
        today_str = now.strftime("%Y-%m-%d")
        active_chats = await get_all_active_chats()
        for (chat_id, poll_time_str, last_poll_date) in active_chats:
            try:
                h, m = poll_time_str.split(":")
                poll_time_obj = time(int(h), int(m))
            except:
                poll_time_obj = time(23, 30)  # –¥–µ—Ñ–æ–ª—Ç
            poll_today = datetime.combine(now.date(), poll_time_obj)
            poll_today = timezone_moscow.localize(poll_today)

            if last_poll_date != today_str and now >= poll_today:
                await send_poll(chat_id)
                await set_chat_last_poll_date(chat_id, today_str)

        await asyncio.sleep(60)

async def send_poll(chat_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–ù–µ –ø–∏–ª üçµ", callback_data="not_drink"),
            InlineKeyboardButton(text="–ü–∏–ª üç∫",    callback_data="drink")
        ]]
    )
    try:
        await bot.send_message(chat_id, "üî• –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ ‚Äî –Ω—É —á—Ç–æ, –±—É—Ö–∞–ª?", reply_markup=keyboard)
    except Exception as e:
        print(f"[ERROR] {chat_id}: {e}")

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------

@dp.my_chat_member()
async def bot_added_to_group(update: ChatMemberUpdated):
    if update.new_chat_member.user.id == (await bot.me()).id:
        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status
        if old_status in ("kicked", "left") and new_status in ("member", "administrator"):
            chat_id = update.chat.id

            row = await load_chat_settings(chat_id)
            if not row:
                async with aiosqlite.connect(DB_PATH) as db:
                    await db.execute("""
                        INSERT OR IGNORE INTO chat_settings (chat_id, active)
                        VALUES (?, 0)
                    """, (chat_id,))
                    await db.commit()

            await bot.send_message(
                chat_id,
                "–ô–æ—É, —è —Ç—É—Ç, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –≤–∞—à—É —Ç—Ä–µ–∑–≤—É—é –∂–∏–∑–Ω—å (–∏–ª–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–∞—à—É —Å–ª–∞–±–∏–Ω—É).\n"
                "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂? –í–≤–µ–¥–∏ /start_challenge YYYY-MM-DD YYYY-MM-DD HH:MM.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫: /start_challenge 2025-01-01 2025-12-31 21:00"
            )

# ---------- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ –° –¢–ï–ö–°–¢–ê–ú–ò (–ë–ï–ó –°–õ–≠–®–ï–ô) ----------

menu_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂"),
            KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
        ],
        [
            KeyboardButton(text="–Ø –≤ –¥–µ–ª–µ"),
            KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ],
        [
            KeyboardButton(text="–°—Ä—ã–≤..."),
            KeyboardButton(text="–¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å")
        ],
        [
            KeyboardButton(text="–£—Å–ª–æ–≤–∏—è"),
            KeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
        ],
        [
            KeyboardButton(text="–ß—ë —Ç—É—Ç –¥–µ–ª–∞—Ç—å?")
        ]
    ],
    resize_keyboard=True
)

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    await message.answer(
        "–ù—É –ø—Ä–∏–≤–µ—Ç–∏–∫–∏. –Ø —Ç—É—Ç –≤–µ–¥—É –≤–∞—à–∏ –ø—å—è–Ω–∫–∏-–ø—å—è–Ω–∫–∏.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–∑–¥–µ–≤–∞—Ç—å—Å—è –Ω–∞–¥ —Å–æ–±–æ–π –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂, –Ω–∞–±–∏—Ä–∞–π—Ç–µ /start_challenge <–¥–∞—Ç–∞1> <–¥–∞—Ç–∞2> <–≤—Ä–µ–º—è>.\n"
        "–ê –µ—Å–ª–∏ –ª–µ–Ω—å —á—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞—Ç—å, –≤–æ—Ç –∫–Ω–æ–ø–æ—á–∫–∏ (–Ω–æ –¥–∞—Ç—ã/–≤—Ä–µ–º—è –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ–æ–±—â–∞—Ç—å –≤—Ä—É—á–Ω—É—é).",
        reply_markup=menu_buttons
    )

@dp.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    txt = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start_challenge YYYY-MM-DD YYYY-MM-DD HH:MM ‚Äî –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∑–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω.\n"
        "/edit_challenge YYYY-MM-DD YYYY-MM-DD HH:MM ‚Äî –ü–æ–º–µ–Ω—è—Ç—å –¥–∞—Ç—ã/–≤—Ä–µ–º—è.\n"
        "/set_time HH:MM ‚Äî –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ–º–µ–Ω—è—Ç—å.\n"
        "/join ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö.\n"
        "/report ‚Äî –°–∫–∞–∑–∞—Ç—å ¬´–î–∞, —è —Å–µ–≥–æ–¥–Ω—è –±—É—Ö–∞–ª, —Å—Ç—ã–∂—É—Å—å¬ª.\n"
        "/mark_sober ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤–æ—Å—Ç—å.\n"
        "/stats ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ —Ç—É—Ç —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –æ—Å—Ç—É–ø–∏–ª—Å—è.\n"
        "/conditions ‚Äî –£—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–∞–º–∏ –ø—Ä–∏–¥—É–º–∞–ª–∏.\n"
        "/help ‚Äî –ù—É, —Ç—ã —ç—Ç–æ —É–∂–µ –≤–∏–¥–∏—à—å.\n\n"
        "–õ–∞–¥–Ω–æ, —Ö–≤–∞—Ç–∏—Ç —á–∏—Ç–∞—Ç—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫–∏."
    )
    await message.answer(txt, reply_markup=menu_buttons)

# -- –°–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ —Å–ª—ç—à–µ–π) —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ --

@dp.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
async def btn_zapusk(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –º–µ–Ω—è –Ω–µ –±–µ—Å–∏—Ç—å, —É–∫–∞–∂–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è: /start_challenge YYYY-MM-DD YYYY-MM-DD HH:MM")

@dp.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂")
async def btn_edit(message: Message):
    await message.answer("–°–µ—Ä—å—ë–∑–Ω–æ? –õ–∞–¥–Ω–æ, –ø–∏—à–∏: /edit_challenge YYYY-MM-DD YYYY-MM-DD HH:MM")

@dp.message(F.text == "–Ø –≤ –¥–µ–ª–µ")
async def btn_join(message: Message):
    # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /join
    await cmd_join(message)

@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_stats(message: Message):
    await cmd_stats(message)

@dp.message(F.text == "–°—Ä—ã–≤...")
async def btn_sryv(message: Message):
    await cmd_report(message)

@dp.message(F.text == "–¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å")
async def btn_sober(message: Message):
    await cmd_mark_sober(message)

@dp.message(F.text == "–£—Å–ª–æ–≤–∏—è")
async def btn_conditions(message: Message):
    await cmd_conditions(message)

@dp.message(F.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
async def btn_set_time(message: Message):
    await message.answer("–û–∫, –Ω—É –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É: /set_time HH:MM")

@dp.message(F.text == "–ß—ë —Ç—É—Ç –¥–µ–ª–∞—Ç—å?")
async def btn_help(message: Message):
    await cmd_help(message)

# ---------- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ß–ï–õ–õ–ï–ù–î–ñ–ê ----------

@dp.message(Command(commands=["start_challenge"]))
async def cmd_start_challenge(message: Message):
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–°–ª—É—à–∞–π, –Ω–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ: /start_challenge 2025-01-01 2025-12-31 [HH:MM]")
        return
    start_date_str = parts[1]
    end_date_str   = parts[2]
    poll_time_str  = "23:30"
    if len(parts) >= 4:
        poll_time_str = parts[3]

    try:
        datetime.strptime(start_date_str, "%Y-%m-%d")
        datetime.strptime(end_date_str, "%Y-%m-%d")
        datetime.strptime(poll_time_str, "%H:%M")
    except:
        await message.answer("–¢—ã –æ—à–∏–±—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–æ–¥–∏ –¥–∞—Ç—ã —Ç–∞–∫: 2025-01-01 2025-12-31 21:00")
        return

    await add_or_update_chat(message.chat.id, start_date_str, end_date_str, poll_time_str)
    await set_chat_active(message.chat.id, True)
    await message.answer(
        f"–ù—É –æ–∫–µ–π, –≤—ã —Å {start_date_str} –ø–æ {end_date_str} –±—É–¥–µ—Ç–µ —Å—Ç—Ä–æ–∏—Ç—å –∏–∑ —Å–µ–±—è —Ç—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤.\n"
        f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {poll_time_str} —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∫—Ç–æ —Å–æ—Ä–≤–∞–ª—Å—è.\n"
        "–£–¥–∞—á–∏, —Ö–æ—Ç—å –∫–æ–º—É-—Ç–æ."
    )

@dp.message(Command(commands=["edit_challenge"]))
async def cmd_edit_challenge(message: Message):
    parts = message.text.strip().split()
    if len(parts) < 3:
        await message.answer("–•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? –ù—É–∂–Ω—ã 2 –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è: 2025-02-01 2025-12-31 [HH:MM]")
        return

    start_date_str = parts[1]
    end_date_str   = parts[2]
    poll_time_str  = "23:30"
    if len(parts) >= 4:
        poll_time_str = parts[3]

    try:
        datetime.strptime(start_date_str, "%Y-%m-%d")
        datetime.strptime(end_date_str, "%Y-%m-%d")
        datetime.strptime(poll_time_str, "%H:%M")
    except:
        await message.answer("–¢—ã –≤–≤—ë–ª –µ—Ä—É–Ω–¥—É. –î–µ–ª–∞–π –∫–∞–∫ –ø—Ä–æ—Å—è—Ç: YYYY-MM-DD YYYY-MM-DD HH:MM.")
        return

    await add_or_update_chat(message.chat.id, start_date_str, end_date_str, poll_time_str)
    await set_chat_active(message.chat.id, True)
    await message.answer(
        f"–û–∫–µ–π, –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {start_date_str} - {end_date_str}, –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: {poll_time_str}\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç—Ç–æ—Ç —Ü–∏—Ä–∫."
    )

@dp.message(Command(commands=["set_time"]))
async def cmd_set_time(message: Message):
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        return

    poll_time_str = parts[1]
    try:
        datetime.strptime(poll_time_str, "%H:%M")
    except:
        await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è (HH:MM).")
        return

    await set_chat_poll_time(message.chat.id, poll_time_str)
    await set_chat_active(message.chat.id, True)
    await message.answer(f"–õ–∞–¥–Ω–æ, –±—É–¥—É —Å—Ç—É—á–∞—Ç—å—Å—è –≤ {poll_time_str}, –ª–∏—à—å –±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–ª, —á—Ç–æ —É —Ç–µ–±—è —á–µ–ª–ª–µ–Ω–¥–∂.")

# ---------- –£–ß–ê–°–¢–ò–ï / –°–¢–ê–¢–ò–°–¢–ò–ö–ê / –£–°–õ–û–í–ò–Ø ----------

@dp.message(Command(commands=["join"]))
async def cmd_join(message: Message):
    user = message.from_user
    await add_participant(message.chat.id, user.id, user.full_name)
    await message.answer(f"–ù—É –ª–∞–¥–Ω–æ, {user.full_name}, –≤—Ö–æ–¥–∏ –≤ –∫–ª—É–±. –ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ —Å–¥—É–µ—à—å—Å—è?")

@dp.message(Command(commands=["stats"]))
async def cmd_stats(message: Message):
    row = await load_chat_settings(message.chat.id)
    if not row:
        await message.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–∞–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∞ —Ç—ã —É–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—á–µ—à—å?")
        return

    start_date_str, end_date_str, conditions, active, poll_time, last_poll_date = row

    try:
        sdt = datetime.strptime(start_date_str, "%Y-%m-%d")
    except:
        sdt = datetime.now()

    try:
        edt = datetime.strptime(end_date_str, "%Y-%m-%d")
    except:
        edt = datetime.now()

    now = datetime.now()
    days_passed = (now - sdt).days
    if days_passed < 0:
        days_passed = 0
    days_left = (edt - now).days
    if days_left < 0:
        days_left = 0

    participants = await get_stats_for_chat(message.chat.id)
    if not participants:
        await message.answer("–¢—É—Ç –≤–æ–æ–±—â–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. /join –≤–≤–µ–¥–∏—Ç–µ, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Å–º–µ–ª–∏—Ç—Å—è.")
        return

    text = (
        f"–ù—É —á—Ç–æ, –≤—ã —Å {start_date_str} –ø–æ {end_date_str}, "
        f"–ø—Ä–æ—à–ª–æ {days_passed} –¥–Ω–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å {days_left}.\n"
        f"–û–ø—Ä–æ—Å –≤ {poll_time}.\n\n"
        "–¢–µ–∫—É—â–∏–µ –≥–µ—Ä–æ–∏ (–∏–ª–∏ –ø–æ–∑–æ—Ä–Ω–∏–∫–∏):\n"
    )
    for user_id, name, drinks, check_ins in participants:
        text += f"‚Ä¢ {name}: {drinks} –∫–æ—Å—è–∫–æ–≤, {check_ins} —Ç—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π\n"

    await message.answer(text)

@dp.message(Command(commands=["report"]))
async def cmd_report(message: Message):
    uid = message.from_user.id
    await update_stat(message.chat.id, uid, "drinks")
    await message.answer("–ù—É —á—Ç–æ –∂, –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π —Å—Ä—ã–≤. –ñ–∞–ª—å, –∫–æ–Ω–µ—á–Ω–æ...")

@dp.message(Command(commands=["mark_sober"]))
async def cmd_mark_sober(message: Message):
    uid = message.from_user.id
    await update_stat(message.chat.id, uid, "check_ins")
    await message.answer("–¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å? –®–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç! –ó–∞–ø–∏—Å–∞–Ω–æ.")

@dp.message(Command(commands=["conditions"]))
async def cmd_conditions(message: Message):
    parts = message.text.strip().split(maxsplit=1)
    row = await load_chat_settings(message.chat.id)
    if not row:
        await message.answer("–¢—ã –±—ã —Ö–æ—Ç—å –∑–∞–ø—É—Å—Ç–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    start_date_str, end_date_str, old_conditions, active, poll_time, last_poll_date = row
    if len(parts) > 1:
        new_text = parts[1]
        await add_or_update_chat(message.chat.id, start_date_str, end_date_str, poll_time, new_text)
        await message.answer(f"–£—Å–ª–æ–≤–∏—è –æ–±–Ω–æ–≤–∏–ª(–∞). –ü–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –≤—ã —ç—Ç–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –±—É–¥–µ—Ç–µ:\n{new_text}")
    else:
        if old_conditions:
            await message.answer(f"–í–∞—à–∏ –Ω—ã–Ω–µ—à–Ω–∏–µ ¬´—É—Å–ª–æ–≤–∏—è¬ª:\n{old_conditions}")
        else:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏–π. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö —Ç–∞–∫: /conditions —Ç–µ–∫—Å—Ç...")

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –û–ü–†–û–°–ê ----------

@dp.callback_query(F.data.in_({"not_drink", "drink"}))
async def handle_poll_response(call: CallbackQuery):
    uid = call.from_user.id
    cid = call.message.chat.id
    if call.data == "not_drink":
        await update_stat(cid, uid, "check_ins")
        await call.answer("–£—Ä–∞, —Ö–æ—Ç—å –∫—Ç–æ-—Ç–æ —Ç—Ä–µ–∑–≤—ã–π!")
    else:
        await update_stat(cid, uid, "drinks")
        await call.answer("–ü–∏—á–∞–ª—å–∫–∞. –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –ø–æ–∑–æ—Ä.")

# ---------- –°–¢–ê–†–¢ –ë–û–¢–ê ----------

async def main():
    await init_db()
    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω
    asyncio.create_task(schedule_polls_loop())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ —Ä–∞–∑–¥—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
