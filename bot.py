import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery,
    ChatMemberUpdated
)
from datetime import datetime, timedelta
import pytz
import aiosqlite

BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ–ª–ª–µ–Ω–¥–∂–∞ ---
start_date = datetime(2025, 1, 15)
end_date   = datetime(2025, 12, 9)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
timezone_moscow = pytz.timezone("Europe/Moscow")

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
daily_poll_time = "15:30"

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∫—É–¥–∞ —à–ª—ë–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å
# –û–Ω–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ö.
active_chats = set()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ---

async def init_db():
    """–°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã."""
    async with aiosqlite.connect("participants.db") as db:
        # –¢–∞–±–ª–∏—Ü–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                user_id   INTEGER PRIMARY KEY,
                name      TEXT,
                drinks    INTEGER DEFAULT 0,
                check_ins INTEGER DEFAULT 0
            )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
        await db.execute("""
            CREATE TABLE IF NOT EXISTS active_chats (
                chat_id INTEGER PRIMARY KEY
            )
        """)
        await db.commit()

async def load_active_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã active_chats –≤ –ø–∞–º—è—Ç—å."""
    loaded_chats = set()
    async with aiosqlite.connect("participants.db") as db:
        async with db.execute("SELECT chat_id FROM active_chats") as cursor:
            async for row in cursor:
                loaded_chats.add(row[0])
    return loaded_chats

async def add_chat(chat_id: int):
    """–î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –ë–î (active_chats)."""
    async with aiosqlite.connect("participants.db") as db:
        await db.execute("INSERT OR IGNORE INTO active_chats (chat_id) VALUES (?)", (chat_id,))
        await db.commit()

# --- –†–ê–ë–û–¢–ê –° –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò ---

async def add_participant(user_id: int, name: str):
    """–î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É (participants), –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç."""
    async with aiosqlite.connect("participants.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO participants (user_id, name) VALUES (?, ?)",
            (user_id, name),
        )
        await db.commit()

async def update_stat(user_id: int, column: str):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º drinks –∏–ª–∏ check_ins –Ω–∞ 1 –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞."""
    async with aiosqlite.connect("participants.db") as db:
        await db.execute(f"UPDATE participants SET {column} = {column} + 1 WHERE user_id = ?", (user_id,))
        await db.commit()

async def get_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: (user_id, name, drinks, check_ins)."""
    async with aiosqlite.connect("participants.db") as db:
        async with db.execute("SELECT * FROM participants") as cursor:
            return await cursor.fetchall()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ï–ñ–ï–î–ù–ï–í–ù–û–ô –†–ê–°–°–´–õ–ö–ò –û–ü–†–û–°–ê ---

async def send_daily_poll():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª: –∂–¥—ë—Ç –¥–æ daily_poll_time –ø–æ –ú—Å–∫, —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –æ–ø—Ä–æ—Å—ã."""
    while True:
        now = datetime.now(timezone_moscow)
        target_time = datetime.strptime(daily_poll_time, "%H:%M").time()
        target_datetime = timezone_moscow.localize(datetime.combine(now.date(), target_time))

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ ‚Äî —Å–¥–≤–∏–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å—É—Ç–∫–∏ –≤–ø–µ—Ä—ë–¥
        if now.time() > target_time:
            target_datetime += timedelta(days=1)

        delay = (target_datetime - now).total_seconds()
        print(f"[LOG] –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(delay)

        # –†–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        for chat_id in active_chats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ù–µ –ø–∏–ª üçµ", callback_data="not_drink"),
                    InlineKeyboardButton(text="–ü–∏–ª üç∫",    callback_data="drink")
                ]
            ])
            try:
                await bot.send_message(chat_id, "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–∏–ª –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

# --- –•–ï–ù–î–õ–ï–†–´ ---

@dp.my_chat_member()
async def bot_added_to_group(update: ChatMemberUpdated):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω—è–µ—Ç—Å—è.
    –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –∫–∏–∫–Ω—É—Ç/left, –∞ —Ç–µ–ø–µ—Ä—å member/administrator ‚Äî –∑–Ω–∞—á–∏—Ç, –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É.
    –ó–¥–µ—Å—å –∂–µ –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫.
    """
    if update.new_chat_member.user.id == (await bot.me()).id:
        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status
        if old_status in ("kicked", "left") and new_status in ("member", "administrator"):
            chat_id = update.chat.id

            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_chats.add(chat_id)
            await add_chat(chat_id)

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id,
                "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.\n"
                "–Ø —É–∂–µ –∑–∞–Ω—ë—Å —ç—Ç–æ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤."
            )

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. üéâ\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start_challenge ‚Äî –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ (–¥–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤)\n"
        "‚Ä¢ /join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "‚Ä¢ /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ /report ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è\n"
        "‚Ä¢ /mark_sober ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ /conditions ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤—Å–µ–º –¥–µ—Ä–∂–∞—Ç—å—Å—è!"
    )

@dp.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start_challenge ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ (–Ω–∞—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ)\n"
        "/join ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/report ‚Äî –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–∏—ë–º–µ –∞–ª–∫–æ–≥–æ–ª—è\n"
        "/mark_sober ‚Äî –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    )

@dp.message(Command(commands=["start_challenge"]))
async def cmd_start_challenge(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.  
    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —á–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–ª—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞,
    –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ, –º–æ–∂–Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç.
    """
    chat_id = message.chat.id
    active_chats.add(chat_id)
    await add_chat(chat_id)
    await message.answer(
        f"üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂ –∑–∞–ø—É—â–µ–Ω!\n"
        f"–ü–µ—Ä–∏–æ–¥: c {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}. üèÅ\n"
        f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø—Ä–æ—Å –≤ {daily_poll_time} –ø–æ –ú–æ—Å–∫–≤–µ."
    )

@dp.message(Command(commands=["join"]))
async def cmd_join(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /join ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫."""
    user = message.from_user
    await add_participant(user.id, user.full_name)
    await message.answer(
        f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± —Ç—Ä–µ–∑–≤—ã—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤! ü¶Ñ"
    )

@dp.message(Command(commands=["stats"]))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    all_stats = await get_stats()
    if not all_stats:
        await message.answer("ü§∑ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞—à–µ–º—É —Ç—Ä–µ–∑–≤–æ–º—É –¥–≤–∏–∂—É.")
        return

    now = datetime.now()
    days_passed = (now - start_date).days
    if days_passed < 0:
        days_passed = 0
    days_left = (end_date - now).days
    if days_left < 0:
        days_left = 0

    stats_msg = (
        f"‚è≥ –° –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø—Ä–æ—à–ª–æ: {days_passed} –¥–Ω–µ–π.\n"
        f"–î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π.\n\n"
    )

    for user_id, name, drinks, check_ins in all_stats:
        stats_msg += f"üç∫ {name}: {drinks} —Ä–∞–∑(–∞) —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å), {check_ins} —Ç—Ä–µ–∑–≤—ã—Ö –æ—Ç–º–µ—Ç–æ–∫.\n"

    await message.answer(stats_msg)

@dp.message(Command(commands=["report"]))
async def cmd_report(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /report ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∑–Ω–∞—ë—Ç ¬´—Å—Ä—ã–≤¬ª (drinks += 1)."""
    user_id = message.from_user.id
    await update_stat(user_id, "drinks")
    await message.answer("üìâ –§–∞–∫—Ç —Ä–∞—Å–ø–∏—Ç–∏—è –æ—Ç–º–µ—á–µ–Ω! –°—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. ü´£")

@dp.message(Command(commands=["mark_sober"]))
async def cmd_mark_sober(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /mark_sober ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å (check_ins += 1)."""
    user_id = message.from_user.id
    await update_stat(user_id, "check_ins")
    await message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ, —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üçµ")

@dp.message(Command(commands=["conditions"]))
async def cmd_conditions(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /conditions ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞."""
    await message.answer(
        "üí™ –£—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n"
        f"–ú—ã –Ω–µ –ø—å—ë–º —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}!\n\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 2 –º–µ—Å—è—Ü–∞,\n"
        "  –ø–æ –æ—á–µ–Ω—å —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ (–ø—Ä–∞–∑–¥–Ω–∏–∫, —É–∂–∏–Ω —Å –ë–∏—Ö–µ—Ä–æ–º).\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π —Å—Ä—ã–≤ ‚Äî —à—Ç—Ä–∞—Ñ: 1üçã!!!"
    )

@dp.callback_query(F.data.in_({"not_drink", "drink"}))
async def handle_poll_response(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ¬´–ù–µ –ø–∏–ª üçµ¬ª / ¬´–ü–∏–ª üç∫¬ª –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (check_ins –∏–ª–∏ drinks).
    """
    user_id = callback.from_user.id
    action = callback.data

    if action == "not_drink":
        await update_stat(user_id, "check_ins")
        await callback.answer("üéâ –ú–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏—Å—å –¥–∞–ª—å—à–µ!")
    elif action == "drink":
        await update_stat(user_id, "drinks")
        await callback.answer("üìâ –ó–∞–ø–∏—Å–∞–ª. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å!")

# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---

async def main():
    await init_db()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–∞–¥–æ
    global active_chats
    active_chats = await load_active_chats()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    # –û—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —à–ª—ë—Ç –æ–ø—Ä–æ—Å
    asyncio.create_task(send_daily_poll())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (–±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
