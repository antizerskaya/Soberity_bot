from aiogram.utils import executor
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = 7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
participants = {}
start_date = None
end_date = None

@dp.message_handler(commands=["start_challenge"])
async def start_challenge(message: types.Message):
    global start_date, end_date
    start_date = datetime.now()
    end_date = datetime(2025, 12, 9)
    await message.reply(f"üöÄ –ü–æ–µ—Ö–∞–ª–∏! –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –§–∏–Ω–∞–ª —ç—Ç–æ–π –ø—å—è–Ω–∫–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è: {end_date.strftime('%d.%m.%Y')} üèÅ")

@dp.message_handler(commands=["join"])
async def join_challenge(message: types.Message):
    user = message.from_user
    if user.id not in participants:
        participants[user.id] = {"name": user.full_name, "drinks": 0}
        await message.reply(f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± —Ç—Ä–µ–∑–≤—ã—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤! ü¶Ñ")
    else:
        await message.reply("üòé –¢—ã —É–∂–µ –≤ –¥–µ–ª–µ, –Ω–µ —Ö–∏—Ç—Ä–∏!")

@dp.message_handler(commands=["stats"])
async def stats(message: types.Message):
    if not participants:
        await message.reply("ü§∑ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∏–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Ç—Ä–µ–∑–≤–æ–º—É –¥–≤–∏–∂—É.")
        return
    days_left = (end_date - datetime.now()).days
    stats_message = f"‚è≥ –î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π. –î–µ—Ä–∂–∏–º—Å—è, —Ä–µ–±—è—Ç–∞!\n\n"
    for user_id, data in participants.items():
        stats_message += f"üç∫ {data['name']}: {data['drinks']} —Ä–∞–∑(–∞) —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å).\n"
    await message.reply(stats_message)

@dp.message_handler(commands=["report"])
async def report(message: types.Message):
    user = message.from_user
    if user.id in participants:
        participants[user.id]["drinks"] += 1
        await message.reply("üìâ –≠—Ö, –Ω—É —Ç—ã –∏ —Å–æ—Ä–≤–∞–ª—Å—è! –ó–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Ç—å. ü´£")
    else:
        await message.reply("ü§î –¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å. –ù–∞–ø–∏—à–∏ /join, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

