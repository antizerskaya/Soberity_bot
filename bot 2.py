import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7926233927:AAFjSBeFDgrjENeTb-d8pxvUfb0hlv9YF94"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
participants = {}
start_date = datetime(2025, 1, 15)  # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
end_date = datetime(2025, 12, 9)  # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
active_chats = set()
daily_poll_time = "20:00"  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command(commands=["start"]))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∑–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞. üéâ\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start_challenge - –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
        "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/report - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è\n"
        "/mark_sober - –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤—Å–µ–º –¥–µ—Ä–∂–∞—Ç—å—Å—è!"
    )

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@dp.message(Command(commands=["help"]))
async def send_help(message: Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start_challenge - –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
        "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/report - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–∏—ë–º–µ –∞–ª–∫–æ–≥–æ–ª—è\n"
        "/mark_sober - –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
        "/conditions - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start_challenge
@dp.message(Command(commands=["start_challenge"]))
async def start_challenge(message: Message):
    global active_chats
    active_chats.add(message.chat.id)
    await message.answer(f"üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞—á–∞—Ç! –° {start_date.strftime('%d.%m.%Y')} –¥–æ {end_date.strftime('%d.%m.%Y')} üèÅ")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /join
@dp.message(Command(commands=["join"]))
async def join_challenge(message: Message):
    user = message.from_user
    if user.id not in participants:
        participants[user.id] = {"name": user.full_name, "drinks": 0, "check_ins": 0}
        await message.answer(f"üçµ {user.full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± —Ç—Ä–µ–∑–≤—ã—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–æ–≤! ü¶Ñ")
    else:
        await message.answer("üòé –¢—ã —É–∂–µ –≤ –¥–µ–ª–µ, –Ω–µ —Ö–∏—Ç—Ä–∏!")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command(commands=["stats"]))
async def stats(message: Message):
    if not participants:
        await message.answer("ü§∑ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∏–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Ç—Ä–µ–∑–≤–æ–º—É –¥–≤–∏–∂—É.")
        return
    days_passed = (datetime.now() - start_date).days
    days_left = (end_date - datetime.now()).days
    stats_message = f"‚è≥ –° –Ω–∞—á–∞–ª–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ø—Ä–æ—à–ª–æ: {days_passed} –¥–Ω–µ–π.\n–î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π.\n\n"
    for user_id, data in participants.items():
        stats_message += f"üç∫ {data['name']}: {data['drinks']} —Ä–∞–∑(–∞) —Å–æ—Ä–≤–∞–ª—Å—è(–∞—Å—å), {data['check_ins']} –æ—Ç–º–µ—Ç–æ–∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏.\n"
    await message.answer(stats_message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /report
@dp.message(Command(commands=["report"]))
async def report(message: Message):
    user_id = message.from_user.id
    if user_id in participants:
        participants[user_id]["drinks"] += 1
        await message.answer("üìâ –≠—Ö, –Ω—É —Ç—ã –∏ —Å–æ—Ä–≤–∞–ª—Å—è! –ó–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Ç—å. ü´£")
    else:
        await message.answer("ü§î –¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å. –ù–∞–ø–∏—à–∏ /join, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å!")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /mark_sober
@dp.message(Command(commands=["mark_sober"]))
async def mark_sober(message: Message):
    user_id = message.from_user.id
    if user_id in participants:
        participants[user_id]["check_ins"] += 1
        await message.answer("üéâ –¢—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üçµ")
    else:
        await message.answer("ü§î –¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å. –ù–∞–ø–∏—à–∏ /join, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å!")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /conditions
@dp.message(Command(commands=["conditions"]))
async def show_conditions(message: Message):
    await message.answer(
        "üí™ –£—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n"
        f"–ú—ã –Ω–µ –ø—å—ë–º —Å {start_date.strftime('%d.%m.%Y')} –¥–æ {end_date.strftime('%d.%m.%Y')}!\n"
        "–í–æ–∑–º–æ–∂–Ω—ã –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è ‚Äî –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 2 –º–µ—Å—è—Ü–∞, \n"
        "–ø–æ –æ—á–µ–Ω—å —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ (–ø—Ä–∞–∑–¥–Ω–∏–∫, —É–∂–∏–Ω —Å –ë–∏—Ö–µ—Ä–æ–º).\n"
        "–®—Ç—Ä–∞—Ñ: 1üçã –∑–∞ –∫–∞–∂–¥–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ."
    )

# –û–ø—Ä–æ—Å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏
async def send_daily_poll():
    while True:
        now = datetime.now()
        target_time = datetime.strptime(daily_poll_time, "%H:%M").time()
        target_datetime = datetime.combine(now.date(), target_time)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ–∑–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if now.time() > target_time:
            target_datetime += timedelta(days=1)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        delay = (target_datetime - now).total_seconds()
        await asyncio.sleep(delay)

        for chat_id in active_chats:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ù–µ –ø–∏–ª üçµ", callback_data="not_drink"),
                    InlineKeyboardButton(text="–ü–∏–ª üç∫", callback_data="drink")
                ]
            ])
            await bot.send_message(chat_id, "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å: –ø–∏–ª –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
@dp.callback_query(lambda c: c.data in ["not_drink", "drink"])
async def handle_poll_response(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in participants:
        await callback.answer("ü§î –¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å. –ù–∞–ø–∏—à–∏ /join, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å!", show_alert=True)
        return

    if callback.data == "not_drink":
        participants[user_id]["check_ins"] += 1
        await callback.answer("üéâ –ú–æ–ª–æ–¥–µ—Ü, –¥–µ—Ä–∂–∏—Å—å –¥–∞–ª—å—à–µ!")
    elif callback.data == "drink":
        participants[user_id]["drinks"] += 1
        await callback.answer("üìâ –ó–∞–ø–∏—Å–∞–ª. –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç
@dp.message()
async def greet_new_chat_on_addition(message: Message):
    if message.chat.type in ["group", "supergroup"] and message.text:
        bot_info = await bot.get_me()
        chat_administrators = [admin.user.id for admin in await bot.get_chat_administrators(message.chat.id)]
        if bot_info.id not in chat_administrators:
            return

        if message.chat.id not in active_chats:
            active_chats.add(message.chat.id)
            await message.answer(
                "üëã –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —á–∞—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∑–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂. üéâ\n"
                "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
                "/start_challenge - –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
                "/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É\n"
                "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/report - –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º –∞–ª–∫–æ–≥–æ–ª—è\n"
                "/mark_sober - –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å\n"
                "/conditions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞—á–Ω—ë–º!"
            )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.message.register(send_welcome, Command(commands=["start"]))
    dp.message.register(send_help, Command(commands=["help"]))
    dp.message.register(start_challenge, Command(commands=["start_challenge"]))
    dp.message.register(join_challenge, Command(commands=["join"]))
    dp.message.register(stats, Command(commands=["stats"]))
    dp.message.register(report, Command(commands=["report"]))
    dp.message.register(mark_sober, Command(commands=["mark_sober"]))
    dp.message.register(show_conditions, Command(commands=["conditions"]))
    dp.callback_query.register(handle_poll_response, lambda c: c.data in ["not_drink", "drink"])

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(send_daily_poll())  # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
